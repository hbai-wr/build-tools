#!/bin/bash

#
# Copyright (c) 2021 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#

#
# stx layer utils to provide the basic functions for stx related things
#

set -e

OSCBIN="/usr/bin/osc"
BUILD_ARGS=" --trust-all-projects"

BUILD_TOOLS_DIR="${MY_REPO}/build-tools"
[ -e "${BUILD_TOOLS_DIR}/scripts/logecho.sh" ] && . "${BUILD_TOOLS_DIR}/scripts/logecho.sh"

function bs_init() {

    OSCBIN=`which osc`
    if [ -z "${OSCBIN}" ]; then
        Echo_error "No client of build server installed"
        exit 1
    fi
    if [ ! -x "${OSCBIN}" ]; then
        Echo_error "No permission to run ${OSCBIN}"
        exit 1
    fi
    OBSUSER=$(grep "OBSUSER" ${HOME}/localrc | awk -F"=" '{print $2}')
    if [ -n ${BSUSER} ]; then
        export OBSHOME="home:"${OBSUSER}
    else
        Echo_error "There is not OBSUSER defined"
	exit 1
    fi
    export OBSUSER="$OBSUSER"

    mkdir -p ${BUILD_CACHE_DIR}"/"${OBSUSER} > /dev/null 2>&1
    if [ ! -f ${BUILD_CACHE_DIR}"/"${OBSUSER}"/prjs" ]; then
        ${OSCBIN} ls > ${BUILD_CACHE_DIR}"/"${OBSUSER}"/prjs"
        [ $? -ne 0 ] && {
            Echo_error "Build client is not ready, please check the config file ~/.config/osc/oscrc"
            Echo_error "Important: apiurl, user and pass for project should be configured correctly"
	    exit 1
        }
    fi
    return 0
}    

function bs_get_prj() {
    local pkg_name=$1
    #example:matches for 'dnsmasq' in packages: # Project # Package home:hbai:branches:home:starlingx:distro dnsmasq
    local bs_prj=`${OSCBIN} search --package ${pkg_name}`
    local ret=`echo ${bs_prj} | grep '# Project' | grep '# Package'`
    if [ -n "${ret}" ]; then
        bs_prj=$(echo ${bs_prj##*$'\n'} | awk -F" " '{print $1}')
    else
        bs_prj=""
    fi
    echo ${bs_prj}
}

function bs_pkg_in_prj() {
    local pkg_name=$1
    local obs_prj=$2
    local rc="no"

    Echo_debug "bs_pkg_in_prj: Search ${obs_prj}""|""$pkg_name"
    ${OSCBIN} search --csv --package ${pkg_name} > .prj
    while read line
    do
	if [ "$line" == "${obs_prj}""|""${pkg_name}" ]; then
            Echo_debug "bs_pkg_in_prj: Found the matched project ${obs_prj} for ${pkg_name}"
	    rc="yes"
	    break;
	fi
    done < .prj
    rm .prj > /dev/null 2>&1
    Echo_debug "bs_pkg_in_prj: Return ${pkg_name} ${obs_prj} $rc"
    echo $rc
}

if [ "${WITH_UNIT_TESTS}" == "yes" ]; then
rc=""
echo "is dnsmasq in home:hbai"
rc=$(bs_pkg_in_prj "dnsmasq" "home:hbai")
if [ $rc == "yes" ]; then
    echo "OK"
else
    echo "Fail"
fi

echo "is parted in home:hbai"
rc=$(bs_pkg_in_prj "parted" "home:hbai")
if [ $rc == "no" ]; then
    echo "OK"
else
    echo "Fail"
fi

echo "is parted in home:starlingx:distro"
rc=$(bs_pkg_in_prj "parted" "home:starlingx:distro")
if [ $rc == "yes" ]; then
    echo "OK"
else
    echo "Fail"
fi

echo "is dnsmasq in home:starlingx:distro"
rc=$(bs_pkg_in_prj "dnsmasq" "home:starlingx:distro")
if [ $rc == "no" ]; then
    echo "OK"
else
    echo "Fail"
fi
fi

function bs_branch_exist() {
    local src_prj=$1

    Echo_debug "bs_branch_exist: Check wthether branch ${src_prj} exist"

    local retprj=""
    local PRJS_CACHE=${BUILD_CACHE_DIR}"/"${OBSUSER}"/prjs"
    if [ -f ${PRJS_CACHE} ]; then
        retprj=$(cat ${PRJS_CACHE} | grep ${src_prj})
    else
        retprj=$(${OSCBIN} ls | grep ${src_prj})
    fi
    if [ -z "${retprj}" ]; then
        Echo_debug "bs_branch_exist: Not exist"
        echo "no"
    else
        Echo_debug "bs_branch_exist: Exists"
        echo "yes"
    fi
}

function bs_branch_pkg() {
    local pkg_name=$1
    local pkg_ver=$2
    local pkg_dir=$3
    local bs_prj=$4
    local build_way=$5

    [ -z "${pkg_name}" ] && {
        Echo_error "No package input to branch package"
        exit 1
    }

    local pkg_home=${BUILD_PKGS_DIR}"/"${pkg_name}
    if [ -d ${pkg_home} ]; then
        rm -rf ${pkg_home} > /dev/null 2>&1
    fi
    mkdir -p ${pkg_home} > /dev/null 2>&1

    local branch_name="home:"${OBSUSER}":branches:"${bs_prj}
    local is_branch_exist=$(bs_branch_exist ${branch_name})
    if [ "${is_branch_exist}" == "no" ]; then
        local branch_info=`${OSCBIN} branch ${bs_prj} ${pkg_name}`
        local ret=`echo ${branch_info} | grep "A working copy of the branched package"`
        if [ -z "$ret" ]; then
            Echo_error "Fail to branch package ${pkg_name} from ${bs_prj}"
            return 1
        fi
        local check_prj=`echo ${branch_info} | grep "^osc co" | awk -F" " '{print $3}'`
        Echo_info "Create branch ${ck_prj} for package ${pkg_name}"
	if [ ! "${branch_name}" == "${ck_prj}" ]; then
            Echo_warning "May wrong branch name?"
	fi
	branch_name=${check_prj}

	cd ${pkg_home}

        ${OSCBIN} co -o . ${branch_name} ${pkg_name} > /dev/null 2>&1
        [ $? -ne 0 ] && {
            Echo_error "Fail to checkout ${pkg_name} from ${branch_name}"
            return 1
        }
        #Clean current directory very carefully for recreate from STX
        Echo_message "Check the current directory: ${cur_pkg_dir}"
        rm -rf * > /dev/null 2>&1
    else
        #Very rude, delete the old package from branch directly
        ${OSCBIN} rdelete -r -f -m "Clean old ${pkg_name}" "${branch_name}" "${pkg_name}" > /dev/null 2>&1
        [ $? -ne 0 ] && {
            Echo_warning "Skip the error result since may there is not the pacakge in branch"
        }
	#branch project exists, but no this package
	rm -rf ${BUILD_PKGS_DIR}"/.osc" > /dev/null 2>&1
        ${OSCBIN} init ${branch_name} > /dev/null 2>&1
	[ $? -ne 0 ] && {
	    Echo_error "Fail to init working copy ${branch_name}"
	    exit 1
	}
        ${OSCBIN} mkpac ${pkg_name}
        if [ -d ${BUILD_PKGS_DIR}"/"${pkg_name}"/.osc" ]; then
            cd ${pkg_home}
	else
	    Echo_error "Fail to make package ${pkg_name} in ${branch_name}"
	    exit 1
	fi
    fi

    local rc=`create_sdebpkg.sh --pkg-path ${pkg_dir} --build-path .`
    if [ -n "${rc}" ]; then
        Echo_message "create_sdebpkg: ${rc}"
        eval $(echo "${rc}" | awk '{if(NF==3) printf("tisdsc=%s\norigtar=%s\ntisdiff=%s\n",$1,$2,$3);}')
        if [ "${build_way}" == "remote" ]; then
            ${OSCBIN} add "${tisdsc}" "${origtar}" "${tisdiff}" "${origtar}.asc"
            [ $? -ne 0 ] && {
                Echo_error "Fail to add recipes for ${pkg_name}"
                return 1 
            }
            ${OSCBIN} commit -m "Added package ${pkg_name}"
	    if [ $? -eq 0 ]; then
                Echo_message "Commit ${tisdsc} to server, this will trigger remote building"
		${OSCBIN} buildlog ${UP_MAIN_REPO} ${ARCH} >&3
	    else
                Echo_message "Fail to commit ${tisdsc} to server, please check"
	    fi
        else
            Echo_message "Launch local build for package ${pkg_name} in backstage"
            ${OSCBIN} build --trust-all-projects ${UP_MAIN_REPO} ${ARCH} ${tisdsc} >&3
        fi
    fi
    return 0
}

function bs_add_newpkg() {
    local pkg_name=$1
    local pkg_ver=$2
    local pkg_dir=$3
    local bs_prj=$4
    local build_way=$5

    #Clean directory of package home very carefully
    local pkg_home=${BUILD_PKGS_DIR}"/"${pkg_name}
    if [ -d ${pkg_home} ]; then
        rm -rf ${pkg_home} > /dev/null 2>&1
    fi
    mkdir -p ${pkg_home} > /dev/null 2>&1

    local branch_name="home:"${OBSUSER}":branches:"${bs_prj}
    local is_banch_exist=$(bs_branch_exist ${branch_name})
    if [ "${is_branch_exist}" == "no" ]; then
	Echo_message "${branch_name} does not exist, use branch -N"
        local branch_info=`osc branch -N ${bs_prj} ${pkg_name}`
	BUILD_ARGS=${BUILD_ARGS}" --local-package"
        local ret=`echo ${branch_info} | grep "A working copy of the branched package"`
        if [ -z "$ret" ]; then
            Echo_error "Fail to branch package ${pkg_name} from ${bs_prj}"
            return 1
        fi
        branch_name=`echo ${branch_info} | grep "^osc co" | awk -F" " '{print $3}'`
        Echo_message "Create branch ${branch_name} for new package ${pkg_name}"

	cd ${pkg_home}

        ${OSCBIN} co -o . ${branch_name} ${pkg_name} > /dev/null 2>&1
        [ $? -ne 0 ] && {
            Echo_error "Fail to checkout ${pkg_name} from ${branch_name}"
            return 1
        }
    else
	${OSCBIN} rdelete -r -f -m "Clean old ${pkg_name}" "${branch_name}" "${pkg_name}"
	[ $? -ne 0 ] && {
            Echo_warning "Skip the error result since may there is not the pacakge in branch"
	}
	#branch project exists, but no this package
	rm -rf ${BUILD_PKGS_DIR}"/.osc" > /dev/null 2>&1
        ${OSCBIN} init ${branch_name} > /dev/null 2>&1
	[ $? -ne 0 ] && {
	    Echo_error "Fail to init working copy ${branch_name}"
	    exit 1
	}
        ${OSCBIN} mkpac ${pkg_name}
        if [ -d ${BUILD_PKGS_DIR}"/"${pkg_name}"/.osc" ]; then
            cd ${pkg_home}
	else
	    Echo_error "Fail to make package ${pkg_name} in ${branch_name}"
	    exit 1
	fi
    fi

    local rc=`create_sdebpkg.sh --pkg-path ${pkg_dir} --build-path .`
    if [ -n "${rc}" ]; then
	eval $(echo "${rc}" | awk '{if(NF==3) printf("tisdsc=%s\norigtar=%s\ntisdiff=%s\n",$1,$2,$3);}')
	Echo_message "create_sdebpkg: ${tisdsc} ${origtar} ${tisdiff}"
	if [ "${build_way}" == "remote" ]; then
            if [ -f "${origtar}.asc" ]; then
                ${OSCBIN} add "${tisdsc}" "${origtar}" "${tisdiff}" "${origtar}.asc"
	    else
                ${OSCBIN} add "${tisdsc}" "${origtar}" "${tisdiff}"
	    fi
	    [ $? -ne 0 ] && {
                Echo_error "Fail to add recipes for ${pkg_name}"
	        return 1 
	    }
            ${OSCBIN} commit -m "Added package ${pkg_name}"
	    if [ $? -eq 0 ]; then
                Echo_message "Commit ${tisdsc} to server, this will trigger remote building"
		${OSCBIN} buildlog ${UP_MAIN_REPO} ${ARCH} >&3
	    else
                Echo_message "Fail to commit ${tisdsc} to server, please check"
	    fi
        else
            Echo_message "Launch local build for package ${pkg_name} in backstage"
            ${OSCBIN} build --local-package ${UP_MAIN_REPO} ${ARCH} ${tisdsc} >&3
            Echo_message "Check the build log ${pkg_name}.log"
	fi
    fi
    return 0
}
